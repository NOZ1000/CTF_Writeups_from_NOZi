from Crypto.Util.number import inverse, isPrime

# Change your N value
N = 25811731422241371637737265155900867329661485489785124807089286537528023640832523229739103133874579930411612500066880887659465813863609645869397290079196911403155546910285940236615871313734212857089711141866731378943159849082239761458317616038145867419849902324216971970674505185658884782550544159644893218962145435498967216336896271015433606748239740723638527641057865620812130476263284020226720452468470814845486621198172600880209226769811006323127499520761356687199203512720494130783010449838412342330986744621870834018739957728850955039103843999370068349286069082384991173885622963220557552215978974485900333373429
e = 65537
first_block  = str("11" + " ") + str("00" + " ") * 127 + str("11" + ' ') * 128
second_block = str("11" + " ") * 128 + str("00" + ' ') * 127 + str("11" + " ")
third_block = str


int_first_block = int(first_block.replace(" ", ""), 16)
int_second_block = int(second_block.replace(" ", ""), 16)
int_third_block = int(third_block, 16)

def get_block_in_bytes(int_block):
    global N
    global e

    phi_N = N - 1  # Since N is a prime, phi(N) = N - 1
    d = inverse(e, phi_N)
    x = pow(int_block, d, N)
    x = x.to_bytes(256, "big")

    return x

def sep_bytes_in_block(bytes_block):
    bytes_block = bytes_block.hex()
    bytes_block_sep = ''

    for i in range(0, len(bytes_block), 2):
        bytes_block_sep += bytes_block[i:i+2] + ' '

    return bytes_block_sep


first_block_in_bytes = get_block_in_bytes(int_first_block)
second_block_in_bytes = get_block_in_bytes(int_second_block)
third_block_in_bytes = get_block_in_bytes(int_third_block)

sep_bytes_blocks = sep_bytes_in_block(first_block_in_bytes) + sep_bytes_in_block(second_block_in_bytes) + sep_bytes_in_block(third_block_in_bytes)

with open('payload.txt', 'w') as f:
    f.write(sep_bytes_blocks)
